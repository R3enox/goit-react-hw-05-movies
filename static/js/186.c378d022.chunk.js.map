{"version":3,"file":"static/js/186.c378d022.chunk.js","mappings":"wQAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,I,IAEaC,EAAO,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMC,GAAO,IAAAC,EAAAC,EAAA,OAAAJ,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACXX,EAAAA,EAAAA,IAAU,UAADY,OACpBN,EAAO,oCAAAM,OAJL,qCAKZ,KAAD,EAFW,OAEXL,EAAAE,EAAAI,KAFOL,EAAID,EAAJC,KAAIC,EAAAK,OAAA,SAGLN,GAAI,wBAAAC,EAAAM,OAAA,GAAAV,EAAA,KACZ,gBALmBW,GAAA,OAAAd,EAAAe,MAAA,KAAAC,UAAA,K,kBCHPC,EAAaC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,saA2BtBC,EAAcH,EAAAA,GAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oE,SCgCnC,EAtDa,WACX,IAAQhB,GAAYmB,EAAAA,EAAAA,MAAZnB,QACRoB,GAAsCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAE9BG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAnC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,OAAAD,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEK,OAFLF,EAAAC,KAAA,EAEdyB,GAAa,GAAM1B,EAAAE,KAAA,EACbV,EAAQK,GAASgC,MAAK,SAAAC,GAAe,IAAZC,EAAID,EAAJC,KAC7BT,EAAeS,EACjB,IAAG,KAAD,EAAA/B,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAgC,GAAAhC,EAAA,SAEFiC,EAAAA,OAAAA,QAAe,+BAA+B,OAE1B,OAF0BjC,EAAAC,KAAA,EAE9CyB,GAAa,GAAO1B,EAAAkC,OAAA,4BAAAlC,EAAAM,OAAA,GAAAV,EAAA,uBAEvB,kBAXc,OAAAH,EAAAe,MAAA,KAAAC,UAAA,KAYfmB,GACF,GAAG,CAAC/B,IAKJ,OACEsC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGZ,IAAaa,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACpBlB,GACCiB,EAAAA,EAAAA,KAAC5B,EAAU,CAAA2B,SACRhB,EAAYmB,KAAI,SAAAC,EAAoCC,GAAS,IAA1CC,EAAIF,EAAJE,KAAMC,EAAYH,EAAZG,aAAcC,EAASJ,EAATI,UACtC,OACEV,EAAAA,EAAAA,MAAA,MAAkBW,UAAU,eAAcT,SAAA,EACxCC,EAAAA,EAAAA,KAAA,OACEQ,UAAU,UACVC,IACEH,EAAY,mCAAAzC,OAC2ByC,GAdvD,8EAiBcI,IAAKL,KAEPL,EAAAA,EAAAA,KAAA,KAAGQ,UAAU,WAAUT,SAAEM,KACzBR,EAAAA,EAAAA,MAAA,KAAGW,UAAU,WAAUT,SAAA,CAAC,cAAYQ,OAX7BH,EAAM,EAcnB,OAGFJ,EAAAA,EAAAA,KAACxB,EAAW,CAAAuB,SAAC,iDAIrB,C","sources":["services/getCast.js","pages/Cast/StyledCast.styled.js","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '163fbdfae3746fb3162540a05c88c436';\n\nexport const getCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`\n  );\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const StyledCast = styled.ul`\n  list-style: none;\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n\n  .castListItem {\n    width: 200px;\n    margin-bottom: 20px;\n    text-align: center;\n  }\n  .castImg {\n    width: 100%;\n    border-radius: 8px;\n  }\n  .castName {\n    color: #333;\n    font-weight: bold;\n    margin: 10px 0;\n  }\n  .castDesc {\n    color: #555;\n    margin-bottom: 5px;\n  }\n`;\n\nexport const Description = styled.p`\n  color: #333;\n  font-size: 24px;\n  font-weight: bold;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { Notify } from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services/getCast';\nimport { Description, StyledCast } from './StyledCast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castDetails, setCastDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setIsLoading(true);\n        await getCast(movieId).then(({ cast }) => {\n          setCastDetails(cast);\n        });\n      } catch (error) {\n        Notify.warning('Oops, something went wrong!');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {castDetails ? (\n        <StyledCast>\n          {castDetails.map(({ name, profile_path, character }, idx) => {\n            return (\n              <li key={idx + 1} className=\"castListItem\">\n                <img\n                  className=\"castImg\"\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : defaultImg\n                  }\n                  alt={name}\n                />\n                <p className=\"castName\">{name}</p>\n                <p className=\"castDesc\">Character: {character}</p>\n              </li>\n            );\n          })}\n        </StyledCast>\n      ) : (\n        <Description> We don't have any reviews for this movie.</Description>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","getCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","movieId","_yield$axios$get","data","_context","prev","next","concat","sent","abrupt","stop","_x","apply","arguments","StyledCast","styled","_templateObject","_taggedTemplateLiteral","Description","_templateObject2","useParams","_useState","useState","_useState2","_slicedToArray","castDetails","setCastDetails","_useState3","_useState4","isLoading","setIsLoading","useEffect","fetchCast","then","_ref2","cast","t0","Notify","finish","_jsxs","_Fragment","children","_jsx","Loader","map","_ref3","idx","name","profile_path","character","className","src","alt"],"sourceRoot":""}